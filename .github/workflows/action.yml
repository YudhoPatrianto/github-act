name: Build Recovery By YudhoPRJKT

on:
  workflow_dispatch:
    inputs:
      CUSTOM_RECOVERY_URL:
        description: 'Put Your Target URL Recovery(example:https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp)'
        required: true

      CUSTOM_RECOVERY_BRANCH:
        description: 'Put Your Target Branch Recovery'
        required: true
      
      DEVICE_TREE_URL:
        description: 'Put Your Device Tree URL Recovery'
        required: true

      BRANCH_DEVICE_TREE:
        description: 'Put Your Branch Device Tree'
        required: true

      TARGET_CODENAME:
        description: 'Put Your Device Codename'
        required: true

      TARGET_VARIANT_BUILD:
        description: 'bootimage(Recovery On boot.img) & recoveryimage(Recovery On recovery.img) & vendorbootimage(Recovery On vendor_boot.img)'
        required: true

      TOKEN_BOT_TELEGRAM:
        description: 'Input Your TOKEN BOT Telegram'
        required: false

      CHATID_BOT_TELEGRAM:
        description: 'Input Your ChatID Telegram'
        required: false

      API_KEY_FILEIO:
        description: 'Input Your API KEY Fileio'
        required: false
jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 💽Cleanup Disk
        uses: rokibhasansagar/slimhub_actions@main
      
      - name: Update And Upgrade Dependency 
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📦Upgrading And Updating Packages</b>" \
          -d parse_mode=HTML
          sudo apt-get update
          sudo apt-get upgrade -y

      - name: 📦Installing Package And Repo
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📦Installing Package And Repo</b>" \
          -d parse_mode=HTML
          sudo apt install jq curl gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib libc6-dev lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev libxml2 lzop pngcrush schedtool squashfs-tools imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses5 python3 python2 python-is-python3 rsync -y
          mkdir ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          sudo ln -sf ~/bin/repo /usr/bin/repo         

          
      - name: 📦Create Folder Recovery Build 
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📦Creating Folder Recovery Build</b>" \
          -d parse_mode=HTML
          mkdir -p out/target/product/fire/root
          

      - name: 👁‍🗨Check Folder 
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>👁‍🗨Checking Folder </b>" \
          -d parse_mode=HTML
          echo $PWD
          
      - name: 📦🔽Cloned Source With Depth
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📦🔽Cloned Source With Depth</b>" \
          -d parse_mode=HTML
          repo init --depth=1 -u ${{ github.event.inputs.CUSTOM_RECOVERY_URL }}.git -b ${{ github.event.inputs.CUSTOM_RECOVERY_BRANCH }}

          
      - name: 📦🔽Sync Source
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📦🔽Syncing Source</b>" \
          -d parse_mode=HTML
          repo sync -j$(nproc --all)

      - name: 📱🔽Clone Device Tree
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>📱🔽Cloning Device Tree</b>" \
          -d parse_mode=HTML
          git clone ${{ github.event.inputs.DEVICE_TREE_URL }} -b ${{ github.event.inputs.BRANCH_DEVICE_TREE }} device/xiaomi/${{ github.event.inputs.TARGET_CODENAME }}


      - name: 🔨Build Progress
        run: |
          build_failed_alert(){
            curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
            -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
            -d "text=<b>🔨❌Build Failed!</b>" \
            -d parse_mode=HTML
          }
          build_success_alert(){
            curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
            -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
            -d "text=<b>🔨✅Build Successfully!</b>" \
            -d parse_mode=HTML
          }
          build_started_alert(){
            curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
            -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
            -d "text=<b>🔨⚙️Build Started!</b>" \
            -d parse_mode=HTML
          }
          build_started_alert
          source build/envsetup.sh
          lunch pb_${{ github.event.inputs.TARGET_CODENAME }}-eng
          mka ${{ github.event.inputs.TARGET_VARIANT_BUILD }}
          
      - name: 📦🔼Upload Files Test
        run: |
          upload_test(){
          api_key='${{ github.event.inputs.API_KEY_FILEIO }}'
          file_path='/home/runner/work/github-act/github-act/out/target/product/${{ github.event.inputs.TARGET_CODENAME }}/boot.img'
          download_link=$(curl -s -F "file=@$file_path" "https://file.io/?key=$api_key" | jq -r '.link')
          echo "$download_link"
          }
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>🔗✅Successfully Generating File Test%0A%0A</b><b>🔗This Is Generated Links:</b> <pre>$(upload_test)</pre>" \
          -d parse_mode=HTML

      - name: 🧹🔨Cleanup Build
        run: |
          cleanup_build(){
          rm -rf out/
          }
          curl -s -X POST https://api.telegram.org/bot${{ github.event.inputs.TOKEN_BOT_TELEGRAM }}/sendMessage > /dev/null 2>&1 \
          -d chat_id=${{ github.event.inputs.CHATID_BOT_TELEGRAM }} \
          -d "text=<b>🧹🔨Cleaning Build</b>$(cleanup_build)" \
          -d parse_mode=HTML
          repo init --depth=1 -u ${{ github.event.inputs.CUSTOM_RECOVERY_URL }}.git -b ${{ github.event.inputs.CUSTOM_RECOVERY_BRANCH }}
